'scopeName': 'source.inform7'
'fileTypes': [
  'ni'
  'i7x'
]
'name': 'Inform 7'

'repository': {
  'substitution':
    'patterns': [
      {
        'name' : 'keyword.control'
        'begin': '\\['
        'beginCaptures':
          '0': { 'name': 'keyword.control.begin.inform7' }
        'end': '\\]'
        'endCaptures':
          '0': { 'name': 'keyword.control.end.inform7' }
      }
    ]
  'nestedcomment':
    'patterns': [
      {
        'begin': '\\['
        'end': '\\]'
        'patterns': [
          {
            'include': '#nestedcomment'
          }
        ]
      }
    ]
  'i6comment':
    'patterns': [
      {
        'name': 'comment.line.bang.inform6.inform7'
        'match': '!.*$'
      }
    ]
  'i6string':
    'patterns': [
      {
        'name': 'string.quoted.double.inform6.inform7'
        'begin': '"'
        'end': '"'
      }
    ]
  'i6dictword':
    'patterns': [
      {
        'name': 'string.quoted.single.inform6.inform7'
        'begin': '\''
        'end': '\''
      }
    ]
}

'patterns': [

  # Strings. These can contained [substitutions].
  {
    'name': 'string.quoted.double.inform7'
    'begin': '"'
    'beginCaptures':
      '0': { 'name': 'punctuation.definition.string.begin.inform7' }
    'end': '"'
    'endCaptures':
      '0': { 'name': 'punctuation.definition.string.end.inform7' }
    'patterns': [
      {
        'include': '#substitution'
      }
    ]
  }

  # Comments. These can be nested!
  {
    'name': 'comment.block.inform7'
    'begin': '\\['
    'beginCaptures':
      '0': { 'name': 'punctuation.definition.comment.begin.inform7' }
    'end': '\\]'
    'endCaptures':
      '0': { 'name': 'punctuation.definition.comment.end.inform7' }
    'patterns': [
      {
        'include': '#nestedcomment'
      }
    ]
  }

  # Header lines. These are case-insensitive and can be indented.
  # We capture the header type ("Chapter") and name separately. All are wrapped in an entity.name.inform7 span.
  {
    'name': 'entity.name.inform7'
    'match': '(?i)^\\s*(volume|book|part|chapter|section)[ \t]+(.*)$'
    'captures': {
      1: { 'name': 'entity.type.section.inform7' }
      2: { 'name': 'entity.name.section.inform7' }
    }
  }

  # Inform 6 inclusions. This could include a whole separate grammar for I6 code, but I don't currently have one set up, so we just mark I6 comments and strings.
  {
    'contentName': 'support.other.inform6.inform7'
    'begin': '\\(-'
    'beginCaptures': {
      0: { 'name': 'punctuation.definition.inform6.begin.inform7' }
      }
    'end': '-\\)'
    'endCaptures': {
      0: { 'name': 'punctuation.definition.inform6.end.inform7' }
      }
    'patterns': [
      { 'include': '#i6comment' }
      { 'include': '#i6string' }
      { 'include': '#i6dictword' }
    ]
  }

  # The documentation at the end of an Inform extension.
  # The "---- DOCUMENTATION ----" line is case-insensitive and can be indented.
  # Whitespace is required around the word "DOCUMENATION", but it doesn't matter how much.
  # Text after the second "----" is accepted as part of the doc comment, although I hope nobody does that.
  {
    'contentName': 'comment.block.documentation.inform7'
    'begin': '(?i)^\\s*(----[ \t]+(documentation)[ \t]+----)'
    'end': '$ENDOFDOC'  # This regexp can never match anything! We want to run to end-of-file.
    'beginCaptures': {
      1: { 'name': 'entity.name.inform7' }
      2: { 'name': 'entity.type.section.inform7' }
    }
  }
]
